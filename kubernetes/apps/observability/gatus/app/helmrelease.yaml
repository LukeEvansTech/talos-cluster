---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: gatus
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: gatus
  values:
    controllers:
      gatus:
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"
        statefulset:
          volumeClaimTemplates:
            - name: config
              storageClass: ceph-block
              accessMode: ReadWriteOnce
              size: 5Gi
        initContainers:
          init-config:
            image:
              repository: ghcr.io/home-operations/k8s-sidecar
              tag: 1.30.10@sha256:dd3b1f0c4e6b4512b2deb50c58acf65fd0f0927120a59a95eec854d32a6c9ce3
            env:
              FOLDER: /config
              LABEL: gatus.io/enabled
              LABEL_VALUE: "true"
              NAMESPACE: ALL
              RESOURCE: both
              UNIQUE_FILENAMES: true
              METHOD: WATCH
            restartPolicy: Always
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi
          init-config-routes:
            image:
              repository: registry.k8s.io/kubectl
              tag: v1.32.0
            command:
              - "/bin/sh"
              - "-c"
              - |
                #!/bin/sh
                set -e
                echo "Starting HTTPRoute discovery for Gatus..."
                while true; do
                  kubectl get httproutes -A -l gatus.io/enabled=true -o json | \
                  jq -r '.items[] | select(.metadata.annotations["gatus.io/endpoint"] != null) |
                    "endpoints:\n  - " + .metadata.annotations["gatus.io/endpoint"]' | \
                  awk 'BEGIN{RS="endpoints:\n"} NR>1{print "endpoints:\n" $0 > "/config/" FILENAME "_httproute_" NR-1 ".yaml"}'

                  # List discovered endpoints
                  echo "Discovered HTTPRoute endpoints:"
                  kubectl get httproutes -A -l gatus.io/enabled=true -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name --no-headers

                  # Watch for changes (sleep and re-check every 60s)
                  sleep 60
                done
            restartPolicy: Always
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 64Mi
        containers:
          app:
            image:
              repository: ghcr.io/twin/gatus
              tag: v5.29.0@sha256:b4afbcaf1cdfcda0b87e732914f101b0e2fab71485ae5d691ceb7b97d021b642
            env:
              TZ: ${TIMEZONE}
              GATUS_CONFIG_PATH: /config
              GATUS_DELAY_START_SECONDS: 5
              WEB_PORT: &port 80
              SECRET_DOMAIN: ${SECRET_DOMAIN}
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - "ALL"
                add:
                  - "NET_RAW"
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 256Mi
        serviceAccount:
          identifier: gatus
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        controller: gatus
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: gatus
        endpoints:
          - port: http
    route:
      app:
        annotations:
          gatus.io/endpoint: |-
            name: gatus
            group: external
            url: https://status.${SECRET_DOMAIN}
            interval: 1m
            client:
              dns-resolver: tcp://1.1.1.1:53
            conditions:
              - "[STATUS] == 200"
        labels:
          gatus.io/enabled: "true"
        hostnames:
          - status.${SECRET_DOMAIN}
        parentRefs:
          - name: envoy-external
            namespace: network
    serviceAccount:
      gatus: {}
    persistence:
      config-file:
        type: configMap
        name: gatus-configmap
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true
